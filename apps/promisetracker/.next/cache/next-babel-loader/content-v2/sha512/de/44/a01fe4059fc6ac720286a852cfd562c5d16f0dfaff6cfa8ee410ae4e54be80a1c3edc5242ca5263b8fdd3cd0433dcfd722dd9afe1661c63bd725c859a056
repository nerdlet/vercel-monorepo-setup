{"ast":null,"code":"import config from \"@/promisetracker/config\";\nimport server from \"@/promisetracker/lib/server\";\nimport { formatDate } from \"@/promisetracker/utils\";\n/**\n * Load fact checks stories from PesaCheck site.\n */\n\nfunction pc(site) {\n  const siteServer = server(site);\n  const SITE_FACT_CHECKS_URL = process.env[`${siteServer.site}FACT_CHECKS_URL`] || config.FACT_CHECKS_URL;\n  const SITE_FACT_CHECKS_TAG = process.env[`${siteServer.site}FACT_CHECKS_TAG`] || config.FACT_CHECKS_TAG;\n\n  const toFactCheck = report => {\n    var _report$virtuals$prev, _report$virtuals;\n\n    return {\n      date: formatDate(report.updatedAt) || null,\n      image: `https://cdn-images-1.medium.com/max/480/${(_report$virtuals$prev = report.virtuals.previewImage) === null || _report$virtuals$prev === void 0 ? void 0 : _report$virtuals$prev.imageId}`,\n      description: ((_report$virtuals = report.virtuals) === null || _report$virtuals === void 0 ? void 0 : _report$virtuals.subtitle) || null,\n      href: `${SITE_FACT_CHECKS_URL}/${report.uniqueSlug}`,\n      title: report.title || null\n    };\n  };\n\n  async function getFactChecks() {\n    const url = `https://corsio.devops.codeforafrica.org/?${SITE_FACT_CHECKS_URL}/tagged/${SITE_FACT_CHECKS_TAG}?format=json`;\n    const response = await fetch(url);\n    const json = await JSON.parse((await response.text()).replace(\"])}while(1);</x>\", \"\"));\n    const reportStreamItems = await json.payload.streamItems;\n    const reports = await reportStreamItems.map(reportStreamItem => reportStreamItem.postPreview && json.payload.references.Post[reportStreamItem.postPreview.postId]); // Remove null stories & return props supported in PostCard\n\n    return reports.filter(report => report).map(toFactCheck);\n  }\n\n  async function getFactCheck(pesacheckUrl) {\n    const {\n      PROXY_URL\n    } = config;\n    const url = `${PROXY_URL}/?${pesacheckUrl}?format=json`;\n    const response = await fetch(url);\n    const json = await JSON.parse((await response.text()).replace(\"])}while(1);</x>\", \"\"));\n    return toFactCheck(json.payload.value);\n  }\n\n  async function getFactCheckList(urls) {\n    return Promise.all((urls === null || urls === void 0 ? void 0 : urls.map(async url => getFactCheck(url))) || []);\n  }\n\n  const api = {\n    factChecks: options => {\n      var _options$urls;\n\n      const url = (options === null || options === void 0 ? void 0 : options.url) || (options === null || options === void 0 ? void 0 : (_options$urls = options.urls) === null || _options$urls === void 0 ? void 0 : _options$urls[0]);\n      return {\n        get latest() {\n          return (async () => {\n            return getFactChecks();\n          })();\n        },\n\n        get list() {\n          if (options.urls) {\n            return (async () => {\n              return getFactCheckList(options.urls);\n            })();\n          }\n\n          return [];\n        },\n\n        get first() {\n          if (url) {\n            return (async () => {\n              return getFactCheck(url);\n            })();\n          }\n\n          return null;\n        }\n\n      };\n    }\n  };\n  return api;\n}\n\nexport default pc;","map":{"version":3,"sources":["/Users/cfafrica/Desktop/vercel-monorepo-setup/apps/promisetracker/src/lib/pc/index.js"],"names":["config","server","formatDate","pc","site","siteServer","SITE_FACT_CHECKS_URL","process","env","FACT_CHECKS_URL","SITE_FACT_CHECKS_TAG","FACT_CHECKS_TAG","toFactCheck","report","date","updatedAt","image","virtuals","previewImage","imageId","description","subtitle","href","uniqueSlug","title","getFactChecks","url","response","fetch","json","JSON","parse","text","replace","reportStreamItems","payload","streamItems","reports","map","reportStreamItem","postPreview","references","Post","postId","filter","getFactCheck","pesacheckUrl","PROXY_URL","value","getFactCheckList","urls","Promise","all","api","factChecks","options","latest","list","first"],"mappings":"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","sourcesContent":["import config from \"@/promisetracker/config\";\nimport server from \"@/promisetracker/lib/server\";\nimport { formatDate } from \"@/promisetracker/utils\";\n\n/**\n * Load fact checks stories from PesaCheck site.\n */\nfunction pc(site) {\n  const siteServer = server(site);\n  const SITE_FACT_CHECKS_URL =\n    process.env[`${siteServer.site}FACT_CHECKS_URL`] || config.FACT_CHECKS_URL;\n  const SITE_FACT_CHECKS_TAG =\n    process.env[`${siteServer.site}FACT_CHECKS_TAG`] || config.FACT_CHECKS_TAG;\n\n  const toFactCheck = (report) => ({\n    date: formatDate(report.updatedAt) || null,\n    image: `https://cdn-images-1.medium.com/max/480/${report.virtuals.previewImage?.imageId}`,\n    description: report.virtuals?.subtitle || null,\n    href: `${SITE_FACT_CHECKS_URL}/${report.uniqueSlug}`,\n    title: report.title || null,\n  });\n\n  async function getFactChecks() {\n    const url = `https://corsio.devops.codeforafrica.org/?${SITE_FACT_CHECKS_URL}/tagged/${SITE_FACT_CHECKS_TAG}?format=json`;\n    const response = await fetch(url);\n    const json = await JSON.parse(\n      (await response.text()).replace(\"])}while(1);</x>\", \"\")\n    );\n    const reportStreamItems = await json.payload.streamItems;\n    const reports = await reportStreamItems.map(\n      (reportStreamItem) =>\n        reportStreamItem.postPreview &&\n        json.payload.references.Post[reportStreamItem.postPreview.postId]\n    );\n\n    // Remove null stories & return props supported in PostCard\n    return reports.filter((report) => report).map(toFactCheck);\n  }\n\n  async function getFactCheck(pesacheckUrl) {\n    const { PROXY_URL } = config;\n    const url = `${PROXY_URL}/?${pesacheckUrl}?format=json`;\n    const response = await fetch(url);\n    const json = await JSON.parse(\n      (await response.text()).replace(\"])}while(1);</x>\", \"\")\n    );\n    return toFactCheck(json.payload.value);\n  }\n\n  async function getFactCheckList(urls) {\n    return Promise.all(urls?.map(async (url) => getFactCheck(url)) || []);\n  }\n  const api = {\n    factChecks: (options) => {\n      const url = options?.url || options?.urls?.[0];\n      return {\n        get latest() {\n          return (async () => {\n            return getFactChecks();\n          })();\n        },\n        get list() {\n          if (options.urls) {\n            return (async () => {\n              return getFactCheckList(options.urls);\n            })();\n          }\n          return [];\n        },\n        get first() {\n          if (url) {\n            return (async () => {\n              return getFactCheck(url);\n            })();\n          }\n          return null;\n        },\n      };\n    },\n  };\n  return api;\n}\n\nexport default pc;\n"]},"metadata":{},"sourceType":"module"}