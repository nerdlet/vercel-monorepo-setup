{"ast":null,"code":"export function slugify(string) {\n  const a = \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\n  const b = \"aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n  return string.toString().toLowerCase().replace(/\\s+/g, \"-\") // Replace spaces with -\n  .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n  .replace(/&/g, \"-and-\") // Replace & with 'and'\n  .replace(/[^\\w-]+/g, \"\") // Remove all non-word characters\n  .replace(/--+/g, \"-\") // Replace multiple - with single -\n  .replace(/^-+/, \"\") // Trim - from start of text\n  .replace(/-+$/, \"\"); // Trim - from end of text\n}\nexport function groupPromisesByStatus(promises) {\n  return {\n    count: promises.length,\n\n    /* eslint-disable no-param-reassign */\n    statusHistory: promises.reduce((promiseByStatus, promise) => {\n      (promiseByStatus[promise.status.title] = promiseByStatus[promise.status.title] || []).push(promise);\n      return promiseByStatus;\n    }, {})\n  };\n}\nexport function formatDate(date) {\n  const locales = \"en-US\";\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\"\n  };\n  return new Date(date).toLocaleDateString(locales, options);\n}\nexport function replaceAll(str, mapObj) {\n  const re = new RegExp(Object.keys(mapObj).join(\"|\"), \"gi\");\n  return str.replace(re, matched => mapObj[matched.toLowerCase()]);\n}","map":{"version":3,"sources":["/Users/cfafrica/Desktop/vercel-monorepo-setup/apps/promisetracker/src/utils.js"],"names":["slugify","string","a","b","p","RegExp","split","join","toString","toLowerCase","replace","c","charAt","indexOf","groupPromisesByStatus","promises","count","length","statusHistory","reduce","promiseByStatus","promise","status","title","push","formatDate","date","locales","options","year","month","day","Date","toLocaleDateString","replaceAll","str","mapObj","re","Object","keys","matched"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B,QAAMC,CAAC,GACL,iFADF;AAEA,QAAMC,CAAC,GACL,iFADF;AAEA,QAAMC,CAAC,GAAG,IAAIC,MAAJ,CAAWH,CAAC,CAACI,KAAF,CAAQ,EAAR,EAAYC,IAAZ,CAAiB,GAAjB,CAAX,EAAkC,GAAlC,CAAV;AAEA,SAAON,MAAM,CACVO,QADI,GAEJC,WAFI,GAGJC,OAHI,CAGI,MAHJ,EAGY,GAHZ,EAGiB;AAHjB,GAIJA,OAJI,CAIIN,CAJJ,EAIQO,CAAD,IAAOR,CAAC,CAACS,MAAF,CAASV,CAAC,CAACW,OAAF,CAAUF,CAAV,CAAT,CAJd,EAIsC;AAJtC,GAKJD,OALI,CAKI,IALJ,EAKU,OALV,EAKmB;AALnB,GAMJA,OANI,CAMI,UANJ,EAMgB,EANhB,EAMoB;AANpB,GAOJA,OAPI,CAOI,MAPJ,EAOY,GAPZ,EAOiB;AAPjB,GAQJA,OARI,CAQI,KARJ,EAQW,EARX,EAQe;AARf,GASJA,OATI,CASI,KATJ,EASW,EATX,CAAP,CAP8B,CAgBP;AACxB;AAED,OAAO,SAASI,qBAAT,CAA+BC,QAA/B,EAAyC;AAC9C,SAAO;AACLC,IAAAA,KAAK,EAAED,QAAQ,CAACE,MADX;;AAEL;AACAC,IAAAA,aAAa,EAAEH,QAAQ,CAACI,MAAT,CAAgB,CAACC,eAAD,EAAkBC,OAAlB,KAA8B;AAC3D,OAACD,eAAe,CAACC,OAAO,CAACC,MAAR,CAAeC,KAAhB,CAAf,GACCH,eAAe,CAACC,OAAO,CAACC,MAAR,CAAeC,KAAhB,CAAf,IAAyC,EAD3C,EAC+CC,IAD/C,CACoDH,OADpD;AAEA,aAAOD,eAAP;AACD,KAJc,EAIZ,EAJY;AAHV,GAAP;AASD;AAED,OAAO,SAASK,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,QAAMC,OAAO,GAAG,OAAhB;AACA,QAAMC,OAAO,GAAG;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAE,MAA1B;AAAkCC,IAAAA,GAAG,EAAE;AAAvC,GAAhB;AAEA,SAAO,IAAIC,IAAJ,CAASN,IAAT,EAAeO,kBAAf,CAAkCN,OAAlC,EAA2CC,OAA3C,CAAP;AACD;AAED,OAAO,SAASM,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AACtC,QAAMC,EAAE,GAAG,IAAIhC,MAAJ,CAAWiC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoB7B,IAApB,CAAyB,GAAzB,CAAX,EAA0C,IAA1C,CAAX;AAEA,SAAO4B,GAAG,CAACzB,OAAJ,CAAY2B,EAAZ,EAAiBG,OAAD,IAAaJ,MAAM,CAACI,OAAO,CAAC/B,WAAR,EAAD,CAAnC,CAAP;AACD","sourcesContent":["export function slugify(string) {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\n  const b =\n    \"aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  return string\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, \"-and-\") // Replace & with 'and'\n    .replace(/[^\\w-]+/g, \"\") // Remove all non-word characters\n    .replace(/--+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n}\n\nexport function groupPromisesByStatus(promises) {\n  return {\n    count: promises.length,\n    /* eslint-disable no-param-reassign */\n    statusHistory: promises.reduce((promiseByStatus, promise) => {\n      (promiseByStatus[promise.status.title] =\n        promiseByStatus[promise.status.title] || []).push(promise);\n      return promiseByStatus;\n    }, {}),\n  };\n}\n\nexport function formatDate(date) {\n  const locales = \"en-US\";\n  const options = { year: \"numeric\", month: \"long\", day: \"2-digit\" };\n\n  return new Date(date).toLocaleDateString(locales, options);\n}\n\nexport function replaceAll(str, mapObj) {\n  const re = new RegExp(Object.keys(mapObj).join(\"|\"), \"gi\");\n\n  return str.replace(re, (matched) => mapObj[matched.toLowerCase()]);\n}\n"]},"metadata":{},"sourceType":"module"}