{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport config from \"@/promisetracker/config\";\nexport default function createApolloClient(initialState = {}, team) {\n  const {\n    GRAPHQL_URI\n  } = config;\n  const uri = team ? `${GRAPHQL_URI}?team=${team}` : GRAPHQL_URI;\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      headers: {\n        \"X-Check-Token\": process.env.CHECK_ACCESS_TOKEN\n      },\n      uri\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/cfafrica/Desktop/vercel-monorepo-setup/apps/promisetracker/src/lib/check/createApolloClient.js"],"names":["ApolloClient","InMemoryCache","HttpLink","config","createApolloClient","initialState","team","GRAPHQL_URI","uri","ssrMode","link","headers","process","env","CHECK_ACCESS_TOKEN","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAAY,GAAG,EAA3C,EAA+CC,IAA/C,EAAqD;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAkBJ,MAAxB;AACA,QAAMK,GAAG,GAAGF,IAAI,GAAI,GAAEC,WAAY,SAAQD,IAAK,EAA/B,GAAmCC,WAAnD;AAEA,SAAO,IAAIP,YAAJ,CAAiB;AACtBS,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIR,QAAJ,CAAa;AACjBS,MAAAA,OAAO,EAAE;AACP,yBAAiBC,OAAO,CAACC,GAAR,CAAYC;AADtB,OADQ;AAIjBN,MAAAA;AAJiB,KAAb,CAFgB;AAQtBO,IAAAA,KAAK,EAAE,IAAId,aAAJ,GAAoBe,OAApB,CAA4BX,YAA5B;AARe,GAAjB,CAAP;AAUD","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\nimport config from \"@/promisetracker/config\";\n\nexport default function createApolloClient(initialState = {}, team) {\n  const { GRAPHQL_URI } = config;\n  const uri = team ? `${GRAPHQL_URI}?team=${team}` : GRAPHQL_URI;\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      headers: {\n        \"X-Check-Token\": process.env.CHECK_ACCESS_TOKEN,\n      },\n      uri,\n    }),\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}