{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/cfafrica/Desktop/vercel-monorepo-setup/apps/promisetracker/src/components/Hero/ProfileChart/RectChart/RectSvgChart.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nvar useStyles = makeStyles(function (_ref) {\n  var typography = _ref.typography;\n  return {\n    root: {\n      maxWidth: \"100%\"\n    },\n    h6: {\n      fontFamily: typography.h1.fontFamily,\n      fontSize: typography.pxToRem(24),\n      lineHeight: 1\n    },\n    h4: {\n      fontSize: typography.pxToRem(12),\n      textTransform: \"Capitalize\",\n      fontWeight: \"normal\"\n    },\n    percentage: {\n      fontSize: typography.pxToRem(12),\n      fontWeight: \"normal\",\n      color: \"#909090\"\n    },\n    typography: {\n      textAlign: \"center\",\n      paddingTop: \"0.8rem \"\n    }\n  };\n});\n\nfunction RectSvgChart(_ref2) {\n  _s();\n\n  var fill = _ref2.fill,\n      height = _ref2.height,\n      stroke = _ref2.stroke,\n      strokeWidth = _ref2.strokeWidth,\n      currentStatusNumber = _ref2.currentStatusNumber,\n      status = _ref2.status,\n      totalPromises = _ref2.totalPromises,\n      containerWidth = _ref2.containerWidth,\n      props = _objectWithoutProperties(_ref2, [\"fill\", \"height\", \"stroke\", \"strokeWidth\", \"currentStatusNumber\", \"status\", \"totalPromises\", \"containerWidth\"]);\n\n  if (!currentStatusNumber) {\n    return null;\n  }\n\n  var classes = useStyles(props);\n  var currentStatusPercentage = currentStatusNumber / totalPromises * 100;\n  var width = currentStatusPercentage * containerWidth / 100;\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(\"svg\", {\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    rx: \"5\",\n    ry: \"5\",\n    width: width,\n    height: height,\n    fill: fill,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: classes.typography,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.h6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, Math.round(currentStatusPercentage), \"%\"), __jsx(Typography, {\n    variant: \"h4\",\n    className: classes.h4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, status), __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.percentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(RectSvgChart, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = RectSvgChart;\nRectSvgChart.propTypes = {\n  containerWidth: PropTypes.number.isRequired,\n  fill: PropTypes.string.isRequired,\n  stroke: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  currentStatusNumber: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  totalPromises: PropTypes.number.isRequired\n};\nexport default RectSvgChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"RectSvgChart\");","map":{"version":3,"sources":["/Users/cfafrica/Desktop/vercel-monorepo-setup/apps/promisetracker/src/components/Hero/ProfileChart/RectChart/RectSvgChart.js"],"names":["React","PropTypes","Typography","makeStyles","useStyles","typography","root","maxWidth","h6","fontFamily","h1","fontSize","pxToRem","lineHeight","h4","textTransform","fontWeight","percentage","color","textAlign","paddingTop","RectSvgChart","fill","height","stroke","strokeWidth","currentStatusNumber","status","totalPromises","containerWidth","props","classes","currentStatusPercentage","width","Math","round","propTypes","number","isRequired","string"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport { Typography } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(({ typography }) => ({\n  root: {\n    maxWidth: \"100%\",\n  },\n  h6: {\n    fontFamily: typography.h1.fontFamily,\n    fontSize: typography.pxToRem(24),\n    lineHeight: 1,\n  },\n  h4: {\n    fontSize: typography.pxToRem(12),\n    textTransform: \"Capitalize\",\n    fontWeight: \"normal\",\n  },\n  percentage: {\n    fontSize: typography.pxToRem(12),\n    fontWeight: \"normal\",\n    color: \"#909090\",\n  },\n  typography: {\n    textAlign: \"center\",\n    paddingTop: \"0.8rem \",\n  },\n}));\n\nfunction RectSvgChart({\n  fill,\n  height,\n  stroke,\n  strokeWidth,\n  currentStatusNumber,\n  status,\n  totalPromises,\n  containerWidth,\n  ...props\n}) {\n  if (!currentStatusNumber) {\n    return null;\n  }\n  const classes = useStyles(props);\n  const currentStatusPercentage = (currentStatusNumber / totalPromises) * 100;\n  const width = (currentStatusPercentage * containerWidth) / 100;\n\n  return (\n    <div className={classes.root}>\n      <svg width={width} height={height}>\n        <rect\n          x=\"0\"\n          y=\"0\"\n          rx=\"5\"\n          ry=\"5\"\n          width={width}\n          height={height}\n          fill={fill}\n          stroke={stroke}\n          strokeWidth={strokeWidth}\n        />\n      </svg>\n      <div className={classes.typography}>\n        <Typography variant=\"h6\" className={classes.h6}>\n          {Math.round(currentStatusPercentage)}%\n        </Typography>\n        <Typography variant=\"h4\" className={classes.h4}>\n          {status}\n        </Typography>\n        <Typography variant=\"h6\" className={classes.percentage}>\n          {/* {currentStatusNumber} */}\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nRectSvgChart.propTypes = {\n  containerWidth: PropTypes.number.isRequired,\n  fill: PropTypes.string.isRequired,\n  stroke: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  currentStatusNumber: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  totalPromises: PropTypes.number.isRequired,\n};\n\nexport default RectSvgChart;\n"]},"metadata":{},"sourceType":"module"}